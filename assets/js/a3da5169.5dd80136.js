"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[177],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),y=r,u=s["".concat(p,".").concat(y)]||s[y]||m[y]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1862:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return s}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],l={},p="API Gateway",c={unversionedId:"installation-guide/deployment/deployment-kubernetes/api-gateway",id:"installation-guide/deployment/deployment-kubernetes/api-gateway",title:"API Gateway",description:"The HA Proxy is used as a simple API Gateway to the platform. The HA Proxy is configured to forward the request to the platform.",source:"@site/docs/03-installation-guide/03-deployment/02-deployment-kubernetes/02-api-gateway.md",sourceDirName:"03-installation-guide/03-deployment/02-deployment-kubernetes",slug:"/installation-guide/deployment/deployment-kubernetes/api-gateway",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/api-gateway",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/overview"},next:{title:"Core",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/core"}},d=[{value:"<code>api-gateway-configmap.yaml</code>",id:"api-gateway-configmapyaml",children:[],level:2},{value:"<code>api-gateway-deployment.yaml</code>",id:"api-gateway-deploymentyaml",children:[],level:2},{value:"<code>api-gateway-service.yaml</code>",id:"api-gateway-serviceyaml",children:[],level:2}],m={toc:d};function s(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-gateway"},"API Gateway"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HA Proxy")," is used as a simple API Gateway to the platform. The ",(0,o.kt)("inlineCode",{parentName:"p"},"HA Proxy")," is configured to forward the request to the platform."),(0,o.kt)("p",null,"It contains the following manifests:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Manifest"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-configmap.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ConfigMap")," holding the ",(0,o.kt)("inlineCode",{parentName:"td"},"haproxy.cfg"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-deployment.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Deployment")," of the API Gateway")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-service.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Service")," to create access for the API Gateway")))),(0,o.kt)("h2",{id:"api-gateway-configmapyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-configmap.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: api-gateway-configmap\n  namespace: czertainly\ndata:\n  haproxy.cfg: |\n    global\n        log stdout format raw local0 debug\n\n    defaults\n        log global\n        timeout connect 5s\n        timeout client 1m\n        timeout server 1m\n\n    frontend api_gateway\n        mode http\n        bind :8080\n\n        # Forward client certificate from the SSL_CLIENT_CERT to X-APP-CERTIFICATE header\n        http-request add-header X-APP-CERTIFICATE %[req.hdr(ssl-client-cert)]\n\n        acl PATH_api path_beg -i /api\n        acl PATH_administrator path_beg -i /administrator\n        acl PATH_operator path_beg -i /operator\n        # optional\n        acl PATH_docs path_beg -i /docs\n\n        use_backend core if PATH_api\n        use_backend fe_administrator if PATH_administrator\n        use_backend fe_operator if PATH_operator\n        # optional\n        use_backend docs if PATH_docs\n\n        default_backend no-match\n\n    backend no-match\n        mode http\n        http-request deny deny_status 404\n\n    backend core\n        mode http\n        server core core-service:8080\n\n    backend fe_administrator\n        mode http\n        server fe-administrator fe-administrator-service:80\n\n    backend fe_operator\n        mode http\n        server fe-operator fe-operator-service:80\n\n    # optional\n    backend docs\n        mode http\n        server docs docs-service:80\n")),(0,o.kt)("h2",{id:"api-gateway-deploymentyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-deployment.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-gateway-deployment\n  namespace: czertainly\n  labels:\n    app: api-gateway\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  selector:\n    matchLabels:\n      app: api-gateway\n  template:\n    metadata:\n      labels:\n        app: api-gateway\n    spec:\n      containers:\n      - name: api-gateway\n        image: haproxy\n        ports:\n        - containerPort: 8080\n          name: http\n        volumeMounts:\n        - name: api-gateway-config-volume\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: api-gateway-config-volume\n        configMap:\n          name: api-gateway-configmap\n          items:\n          - key: haproxy.cfg\n            path: haproxy.cfg\n")),(0,o.kt)("h2",{id:"api-gateway-serviceyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-service.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: api-gateway\n  name: api-gateway-service\n  namespace: czertainly\nspec:\n  ports:\n    - port: 8080\n      protocol: "TCP"\n  selector:\n    app: api-gateway\n')))}s.isMDXComponent=!0}}]);