"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[6024],{3905:function(e,a,t){t.d(a,{Zo:function(){return d},kt:function(){return s}});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),c=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=c(e.components);return n.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),y=c(t),s=r,u=y["".concat(p,".").concat(s)]||y[s]||m[s]||o;return t?n.createElement(u,i(i({ref:a},d),{},{components:t})):n.createElement(u,i({ref:a},d))}));function s(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=y;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},27273:function(e,a,t){t.r(a),t.d(a,{assets:function(){return d},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var n=t(83117),r=t(80102),o=(t(67294),t(3905)),i=["components"],l={},p="HAProxy Gateway",c={unversionedId:"installation-guide/deployment/deployment-kubernetes/api-gateway/haproxy-gateway",id:"installation-guide/deployment/deployment-kubernetes/api-gateway/haproxy-gateway",title:"HAProxy Gateway",description:"HAProxy is a free, very fast and reliable reverse-proxy offering high availability, load balancing, and proxying for TCP and HTTP-based applications.",source:"@site/docs/03-installation-guide/03-deployment/02-deployment-kubernetes/02-api-gateway/02-haproxy-gateway.md",sourceDirName:"03-installation-guide/03-deployment/02-deployment-kubernetes/02-api-gateway",slug:"/installation-guide/deployment/deployment-kubernetes/api-gateway/haproxy-gateway",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/api-gateway/haproxy-gateway",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kong Gateway",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/api-gateway/kong-gateway"},next:{title:"Core",permalink:"/docs/installation-guide/deployment/deployment-kubernetes/core"}},d={},m=[{value:"<code>api-gateway-configmap.yaml</code>",id:"api-gateway-configmapyaml",level:2},{value:"<code>api-gateway-deployment.yaml</code>",id:"api-gateway-deploymentyaml",level:2},{value:"<code>api-gateway-service.yaml</code>",id:"api-gateway-serviceyaml",level:2}],y={toc:m};function s(e){var a=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"haproxy-gateway"},"HAProxy Gateway"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"HAProxy")," is a free, very fast and reliable reverse-proxy offering high availability, load balancing, and proxying for TCP and HTTP-based applications."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HAProxy")," is used as a simple API Gateway to the platform. The ",(0,o.kt)("inlineCode",{parentName:"p"},"HAProxy")," is configured to forward the request to the platform. You can configure and run it using the following guide."),(0,o.kt)("p",null,"It contains the following manifests:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Manifest"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-configmap.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ConfigMap")," holding the ",(0,o.kt)("inlineCode",{parentName:"td"},"haproxy.cfg")," configuration")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-deployment.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Deployment")," of the API Gateway")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"api-gateway-service.yaml")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Service")," to create access for the API Gateway")))),(0,o.kt)("h2",{id:"api-gateway-configmapyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-configmap.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: api-gateway-configmap\n  namespace: czertainly\ndata:\n  haproxy.cfg: |\n    global\n        log stdout format raw local0 debug\n\n    defaults\n        log global\n        timeout connect 5s\n        timeout client 1m\n        timeout server 1m\n\n    frontend api_gateway\n        mode http\n        bind :8080\n\n        # Forward client certificate from the SSL_CLIENT_CERT to X-APP-CERTIFICATE header\n        http-request add-header X-APP-CERTIFICATE %[req.hdr(ssl-client-cert)]\n\n        acl PATH_api path_beg -i /api\n        acl PATH_administrator path_beg -i /administrator\n        acl PATH_operator path_beg -i /operator\n        # optional\n        acl PATH_docs path_beg -i /docs\n\n        use_backend core if PATH_api\n        use_backend fe_administrator if PATH_administrator\n        use_backend fe_operator if PATH_operator\n        # optional\n        use_backend docs if PATH_docs\n\n        default_backend no-match\n\n    backend no-match\n        mode http\n        http-request deny deny_status 404\n\n    backend core\n        mode http\n        server core core-service:8080\n\n    backend fe_administrator\n        mode http\n        server fe-administrator fe-administrator-service:80\n\n    backend fe_operator\n        mode http\n        server fe-operator fe-operator-service:80\n\n    # optional\n    backend docs\n        mode http\n        server docs docs-service:80\n")),(0,o.kt)("h2",{id:"api-gateway-deploymentyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-deployment.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-gateway-deployment\n  namespace: czertainly\n  labels:\n    app: api-gateway\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  selector:\n    matchLabels:\n      app: api-gateway\n  template:\n    metadata:\n      labels:\n        app: api-gateway\n    spec:\n      containers:\n      - name: api-gateway\n        image: haproxy\n        ports:\n        - containerPort: 8080\n          name: http\n        volumeMounts:\n        - name: api-gateway-config-volume\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: api-gateway-config-volume\n        configMap:\n          name: api-gateway-configmap\n          items:\n          - key: haproxy.cfg\n            path: haproxy.cfg\n")),(0,o.kt)("h2",{id:"api-gateway-serviceyaml"},(0,o.kt)("inlineCode",{parentName:"h2"},"api-gateway-service.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: api-gateway\n  name: api-gateway-service\n  namespace: czertainly\nspec:\n  ports:\n    - port: 8080\n      protocol: "TCP"\n  selector:\n    app: api-gateway\n')))}s.isMDXComponent=!0}}]);