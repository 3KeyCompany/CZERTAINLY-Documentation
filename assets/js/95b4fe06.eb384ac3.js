"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[485],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return f}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var u=r.createContext({}),c=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},l=function(n){var e=c(n.components);return r.createElement(u.Provider,{value:e},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},E=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,u=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=c(t),E=o,f=p["".concat(u,".").concat(E)]||p[E]||m[E]||i;return t?r.createElement(f,a(a({ref:e},l),{},{components:t})):r.createElement(f,a({ref:e},l))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=E;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=n,s[p]="string"==typeof n?n:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}E.displayName="MDXCreateElement"},99452:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=t(83117),o=t(80102),i=(t(67294),t(3905)),a=["components"],s={},u="Entrust SAM Sample Configuration",c={unversionedId:"signing/sam-integration/entrust-sam/samples/sample-configuration",id:"signing/sam-integration/entrust-sam/samples/sample-configuration",title:"Entrust SAM Sample Configuration",description:"The following is a sample configuration of the EntrustSAMCryptoToken:",source:"@site/docs/30-signing/30-sam-integration/07-entrust-sam/11-samples/02-sample-configuration.md",sourceDirName:"30-signing/30-sam-integration/07-entrust-sam/11-samples",slug:"/signing/sam-integration/entrust-sam/samples/sample-configuration",permalink:"/docs/signing/sam-integration/entrust-sam/samples/sample-configuration",draft:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/30-sam-integration/07-entrust-sam/11-samples/02-sample-configuration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dynamic Configuration Signer",permalink:"/docs/signing/sam-integration/entrust-sam/dynamic-config-signer-properties"},next:{title:"Entrust SAM Sample OneTime Configuration",permalink:"/docs/signing/sam-integration/entrust-sam/samples/sample-onetime-configuration"}},l={},p=[],m={toc:p},E="wrapper";function f(n){var e=n.components,t=(0,o.Z)(n,a);return(0,i.kt)(E,(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"entrust-sam-sample-configuration"},"Entrust SAM Sample Configuration"),(0,i.kt)("p",null,"The following is a sample configuration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"EntrustSAMCryptoToken"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Type of worker\nWORKERGENID1.TYPE=PROCESSABLE\n\n# Name for other workers to reference this worker\nWORKERGENID1.NAME=EntrustSAMCryptoToken\n\n# EntrustSAMCryptoToken must only be used in conjunction with EntrustSAMCryptoWorker\nWORKERGENID1.IMPLEMENTATION_CLASS=com.czertainly.signserver.module.entrustsam.EntrustSAMCryptoWorker\nWORKERGENID1.CRYPTOTOKEN_IMPLEMENTATION_CLASS=com.czertainly.signserver.module.entrustsam.EntrustSAMCryptoToken\n\n# A name of a crypto token containing private key and user certificate. Will be used to authenticate crypto token to\n# Entrust SAM.\nWORKERGENID1.OTHER_SIGNERS=EntrustClientKeyStore\nWORKERGENID1.ENTRUST_CLIENT_AUTHENTICATION_KEY_ALIAS=ed1dcb7122e666b21c36b3a81d61910a864c9d64\n\n# Entrust SAM server url\nWORKERGENID1.ENTRUST_SAM_SERVER=https://213.121.187.216:10462\nWORKERGENID1.ENTRUST_TRUST_SELF_SIGNED=true\nWORKERGENID1.ENTRUST_CONNECTION_POOL_SIZE=20\n\n# Service to authenticate signing requests\nWORKERGENID1.SAD_PROVIDER_IMPLEMENTATION_CLASS=com.czertainly.signserver.module.entrustsam.sad.RestSAMSadProvider\nWORKERGENID1.SAD_PROVIDER_URL=https://entrustsam-simulator.czertainly.com\nWORKERGENID1.SAD_PROVIDER_AUTH_TYPE=BASIC\nWORKERGENID1.SAD_PROVIDER_USERNAME=******\nWORKERGENID1.SAD_PROVIDER_PASSWORD=******\n")))}f.isMDXComponent=!0}}]);