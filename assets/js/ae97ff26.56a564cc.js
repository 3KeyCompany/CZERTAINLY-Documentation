"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[1816],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(r),f=i,g=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(g,c(c({ref:t},u),{},{components:r})):n.createElement(g,c({ref:t},u))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,c=new Array(a);c[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,c[1]=o;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},44815:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var n=r(83117),i=r(80102),a=(r(67294),r(3905)),c=["components"],o={},l="jSCEP",s={unversionedId:"certificate-key/protocols/scep/jscep",id:"certificate-key/protocols/scep/jscep",title:"jSCEP",description:"jSCEP is s an open-source Java implementation of the SCEP protocol that works with the CZERTAINLY SCEP service implementation.",source:"@site/docs/10-certificate-key/07-protocols/03-scep/13-jscep.md",sourceDirName:"10-certificate-key/07-protocols/03-scep",slug:"/certificate-key/protocols/scep/jscep",permalink:"/docs/certificate-key/protocols/scep/jscep",draft:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/10-certificate-key/07-protocols/03-scep/13-jscep.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple SCEP (SSCEP)",permalink:"/docs/certificate-key/protocols/scep/sscep"},next:{title:"Configuration and Settings",permalink:"/docs/certificate-key/settings/overview"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create the client",id:"create-the-client",level:2},{value:"Create requester self-signed certificate",id:"create-requester-self-signed-certificate",level:2},{value:"Generate private key and certificate signing request",id:"generate-private-key-and-certificate-signing-request",level:2},{value:"Enroll certificate",id:"enroll-certificate",level:2},{value:"Certificate renewal",id:"certificate-renewal",level:2}],d={toc:p},f="wrapper";function g(e){var t=e.components,r=(0,i.Z)(e,c);return(0,a.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"jscep"},"jSCEP"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/jscep/jscep"},(0,a.kt)("inlineCode",{parentName:"a"},"jSCEP"))," is s an open-source Java implementation of the SCEP protocol that works with the CZERTAINLY SCEP service implementation."),(0,a.kt)("p",null,"This guide shows, how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"jSCEP")," to manage certificates using SCEP protocol and certificate management services controlled by the platform using the Java code."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"jSCEP")," with the CZERTAINLY, you need to have the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"jSCEP")," command line interface or source code available"),(0,a.kt)("li",{parentName:"ul"},"Configured at least one ",(0,a.kt)("inlineCode",{parentName:"li"},"RA Profile")," certificate service"),(0,a.kt)("li",{parentName:"ul"},"SCEP protocol enabled according to the ",(0,a.kt)("a",{parentName:"li",href:"./enable-scep-ra-profile"},"Enable SCEP for RA Profile"))),(0,a.kt)("p",null,"For more information about the ",(0,a.kt)("inlineCode",{parentName:"p"},"jSCEP"),", download source code or CLI, refer to official ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jscep/jscep"},"jSCEP Repository"),"."),(0,a.kt)("h2",{id:"create-the-client"},"Create the client"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"jSCEP")," offers full support for HTTPS-enabled SCEP servers. When the HTTPS-enabled implementation is used, we can configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpsURLConnection")," to use a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"SSLSocketFactory")," to perform authentication."),(0,a.kt)("p",null,"To create ",(0,a.kt)("inlineCode",{parentName:"p"},"Client"),", we need to know the SCEP service URL and the ",(0,a.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," that is used to verify the CA certificate being sent by the SCEP server is the expected certificate (see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jscep/jscep#creating-a-callback-handler"},"Creating a Callback Handler")," for more information)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'URL url = new URL("https://[domain]:[port]/api/v1/protocols/scep/raProfile/czertainly/pkiclient.exe");\nCertificateVerifier verifier = new OptimisticCertificateVerifier();\nCallbackHandler handler = new DefaultCallbackHandler(verifier);\nClient client = new Client(url, handler);\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Client")," is used to communicate with the SCEP server."),(0,a.kt)("h2",{id:"create-requester-self-signed-certificate"},"Create requester self-signed certificate"),(0,a.kt)("p",null,"The requester self-signed certificate is used to encrypt and sign requests. The requester is a client requesting certificate from the certification authority. Before it can start the PKI operation, it must have at least one appropriate key pair and certificate."),(0,a.kt)("p",null,"The following is an example of how to create a self-signed certificate using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.bouncycastle.org/"},"Bouncy Castle")," provider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// initialize and generate requester private/public key pair\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\nkeyPairGenerator.initialize(2048);\nKeyPair requesterKeyPair = keyPairGenerator.genKeyPair();\n\n// get the strongest signature algorithm supported by the CA\nCapabilities caps = client.getCaCapabilities();\nString sigAlg = caps.getStrongestSignatureAlgorithm();\n\n// mandatory to create the certificate\nX500Principal requesterIssuer = new X500Principal("CN=requester");\nBigInteger serial = BigInteger.ONE;\nCalendar calendar = Calendar.getInstance();\ncalendar.add(Calendar.DATE, -1); // yesterday\nDate notBefore = calendar.getTime();\ncalendar.add(Calendar.DATE, +2); // tomorrow\nDate notAfter = calendar.getTime();\nX500Principal requesterSubject = new X500Principal("CN=requester");\nPublicKey requesterPubKey = requesterKeyPair.getPublic(); // from generated key pair\nJcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(requesterIssuer, serial, notBefore, notAfter, requesterSubject, requesterPubKey);\n\n// create self-signed certificate\nPrivateKey requesterPrivKey = requesterKeyPair.getPrivate(); // from generated key pair\nJcaContentSignerBuilder certSignerBuilder = new JcaContentSignerBuilder(sigAlg); // from above\nContentSigner certSigner = certSignerBuilder.build(requesterPrivKey);\nX509CertificateHolder certHolder = certBuilder.build(certSigner);\n\n// get the certificate from the certificate holder\nJcaX509CertificateConverter converter = new JcaX509CertificateConverter();\nX509Certificate requesterCert = converter.getCertificate(certHolder);\n')),(0,a.kt)("h2",{id:"generate-private-key-and-certificate-signing-request"},"Generate private key and certificate signing request"),(0,a.kt)("p",null,"The private key algorithm, its attributes, and the content of the certificate signing requests depends on the configuration of the certification authority policy. The following example generate the private key and certificate signing request using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.bouncycastle.org/"},"Bouncy Castle"),"` provider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// initialize and generate the private/public key pair for the entity\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\nkeyPairGenerator.initialize(1024);\nKeyPair entityKeyPair = keyPairGenerator.genKeyPair();\n\n// generate certificate signing request\nX500Principal entitySubject = requesterSubject; // use the same subject as the self-signed certificate\nPublicKey entityPubKey = entityKeyPair.getPublic();\nPKCS10CertificationRequestBuilder csrBuilder = new JcaPKCS10CertificationRequestBuilder(entitySubject, entityPubKey);\n\n// optionally, we can include challengePassword attribute (and other attributes if necessary)\nDERPrintableString password = new DERPrintableString("challengePassword");\ncsrBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_challengePassword, password);\n\n// create certificate signing request\nPrivateKey entityPrivKey = entityKeyPair.getPrivate();\nJcaContentSignerBuilder csrSignerBuilder = new JcaContentSignerBuilder(sigAlg);\nContentSigner csrSigner = csrSignerBuilder.build(entityPrivKey);\nPKCS10CertificationRequest csr = csrBuilder.build(csrSigner); \n')),(0,a.kt)("h2",{id:"enroll-certificate"},"Enroll certificate"),(0,a.kt)("p",null,"You can enroll certificate using the ",(0,a.kt)("inlineCode",{parentName:"p"},"enrol")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Client"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"enrol")," method takes the requester certificate, requester private key, and certificate signing request of the entity as parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"EnrollmentResponse res = client.enrol(requesterCert, requesterPrivKey, csr);\n")),(0,a.kt)("p",null,"Based on the response, enrolled certificate can be obtained from the ",(0,a.kt)("inlineCode",{parentName:"p"},"EnrollmentResponse")," object. When the enrollment status is still pending, we should poll the SCEP server until the status is changed to success and certificate can be obtained, or failed."),(0,a.kt)("p",null,"Enrolled certificate is also stored in the certificate inventory of the platform and can be further managed and automated."),(0,a.kt)("h2",{id:"certificate-renewal"},"Certificate renewal"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"jSCEP")," supports certificate renewal. If you're renewing a certificate, you should send an empty password, but the SCEP server must validate the request against the requester certificate. (the renewal is authentication with the current and valid certificate and private key of the entity)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"EnrollmentResponse res = client.enrol(entityCert, entityPrivKey, newCsr);\n")),(0,a.kt)("p",null,"Renewed certificate is included in the certificate inventory of the platform."))}g.isMDXComponent=!0}}]);