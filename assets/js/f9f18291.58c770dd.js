"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[3365],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17224:function(e,t,n){n.r(t),n.d(t,{GenTable:function(){return k},assets:function(){return u},basic:function(){return g},contentTitle:function(){return d},data:function(){return m},default:function(){return R},frontMatter:function(){return s},metadata:function(){return p},tls:function(){return f},toc:function(){return c}});var r=n(83117),a=n(80102),o=n(67294),l=n(3905),i=["components"],s={},d="REST SAD Provider",p={unversionedId:"signing/sam-integration/entrust-sam/sad-providers/rest",id:"signing/sam-integration/entrust-sam/sad-providers/rest",title:"REST SAD Provider",description:"The implementation class of the REST SAD Provider is:",source:"@site/docs/30-signing/30-sam-integration/07-entrust-sam/07-sad-providers/03-rest.mdx",sourceDirName:"30-signing/30-sam-integration/07-entrust-sam/07-sad-providers",slug:"/signing/sam-integration/entrust-sam/sad-providers/rest",permalink:"/docs/signing/sam-integration/entrust-sam/sad-providers/rest",draft:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/30-sam-integration/07-entrust-sam/07-sad-providers/03-rest.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/signing/sam-integration/entrust-sam/sad-providers/overview"},next:{title:"Metadata SAD Provider",permalink:"/docs/signing/sam-integration/entrust-sam/sad-providers/metadata"}},u={},c=[{value:"Authorization types",id:"authorization-types",level:2},{value:"BASIC",id:"basic",level:3},{value:"TLS",id:"tls",level:3},{value:"Keystore formats",id:"keystore-formats",level:4},{value:"Truststore formats",id:"truststore-formats",level:4},{value:"OpenAPI Definition",id:"openapi-definition",level:2},{value:"v1",id:"v1",level:3},{value:"v2",id:"v2",level:3}],m=[{property:"SAD_PROVIDER_URL",description:(0,l.kt)(o.Fragment,null,"URL to get the Signature Activation Data. The URL should implement REST interface of this provider."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--success"},"YES"))},{property:"SAD_PROVIDER_AUTH_TYPE",description:(0,l.kt)(o.Fragment,null,"Authorization type for the REST API. Supported values are:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"NONE"),(0,l.kt)("li",null,"BASIC"),(0,l.kt)("li",null,"TLS")),"See information about the authentication properties below."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--success"},"YES"))},{property:"SAD_PROVIDER_RESPONSE_TIMEOUT",description:(0,l.kt)(o.Fragment,null,"Response timeout in seconds."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"60")),mandatory:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--danger"},"NO"))}],k=function(e){var t=e.data;return(0,l.kt)(o.Fragment,null,t.map((function(e,t){return(0,l.kt)("tr",{key:t},(0,l.kt)("td",null,(0,l.kt)("b",null,e.property)),(0,l.kt)("td",null,e.description),(0,l.kt)("td",null,e.default),(0,l.kt)("td",null,e.mandatory))})))},g=[{property:"SAD_PROVIDER_USERNAME",description:(0,l.kt)(o.Fragment,null,"Identification of the user."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_AUTH_TYPE = BASIC"))},{property:"SAD_PROVIDER_PASSWORD",description:(0,l.kt)(o.Fragment,null,"Password for the username."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_AUTH_TYPE = BASIC"))}],f=[{property:"SAD_PROVIDER_KEYSTORE_FORMAT",description:(0,l.kt)(o.Fragment,null,"Format of the keystore provided. Supported values are:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"CRYPTOTOKEN"),(0,l.kt)("li",null,"BASE64"),(0,l.kt)("li",null,"FILE"))),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_AUTH_TYPE = TLS"))},{property:"SAD_PROVIDER_KEYSTORE_ALIAS",description:(0,l.kt)(o.Fragment,null,"Alias of the private key stored in the keystore."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_AUTH_TYPE = TLS"))},{property:"SAD_PROVIDER_KEYSTORE_INDEX",description:(0,l.kt)(o.Fragment,null,"Index of the Crypto Token that is configured in ",(0,l.kt)("b",null,"OTHER_SIGNERS")," property."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_KEYSTORE_FORMAT = CRYPTOTOKEN"))},{property:"SAD_PROVIDER_KEYSTORE",description:(0,l.kt)(o.Fragment,null,"Referring to the keystore content. See ",(0,l.kt)("a",{href:"#keystore-formats"},"Keystore formats"),"."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_KEYSTORE_FORMAT = BASE64, FILE"))},{property:"SAD_PROVIDER_KEYSTORE_TYPE",description:(0,l.kt)(o.Fragment,null,"Type of the keystore. Supported values are:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"PKCS12"),(0,l.kt)("li",null,"JKS"))),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_KEYSTORE_FORMAT = BASE64, FILE"))},{property:"SAD_PROVIDER_KEYSTORE_PASSWORD",description:(0,l.kt)(o.Fragment,null,"Password for the keystore."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_KEYSTORE_FORMAT = BASE64, FILE"))},{property:"SAD_PROVIDER_TRUSTSTORE",description:(0,l.kt)(o.Fragment,null,"Referring to the truststore content. See ",(0,l.kt)("a",{href:"#truststore-formats"},"Truststore formats"),"."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--danger"},"NO"))},{property:"SAD_PROVIDER_TRUSTSTORE_FORMAT",description:(0,l.kt)(o.Fragment,null,"Format of the truststore provided. Supported values are:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"PEM"),(0,l.kt)("li",null,"BASE64"),(0,l.kt)("li",null,"FILE"))),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory when ",(0,l.kt)("b",null,"SAD_PROVIDER_TRUSTSTORE")," provided")},{property:"SAD_PROVIDER_TRUSTSTORE_TYPE",description:(0,l.kt)(o.Fragment,null,"Type of the truststore. Supported values are:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"PKCS12"),(0,l.kt)("li",null,"JKS"))),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_TRUSTSTORE_FORMAT = BASE64, FILE"))},{property:"SAD_PROVIDER_TRUSTSTORE_PASSWORD",description:(0,l.kt)(o.Fragment,null,"Password for the truststore."),default:(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{class:"badge badge--secondary"},"NONE")),mandatory:(0,l.kt)(o.Fragment,null,"Mandatory for ",(0,l.kt)("b",null,"SAD_PROVIDER_TRUSTSTORE_FORMAT = BASE64, FILE"))}],y={toc:c,data:m,GenTable:k,basic:g,tls:f},S="wrapper";function R(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)(S,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rest-sad-provider"},"REST SAD Provider"),(0,l.kt)("p",null,"The implementation class of the REST SAD Provider is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"com.czertainly.signserver.module.entrustsam.sad.RestSAMSadProvider\n")),(0,l.kt)("p",null,"The following properties can be configured for the REST SAD Provider:"),(0,l.kt)("table",null,(0,l.kt)("th",null,"Property"),(0,l.kt)("th",null,"Description"),(0,l.kt)("th",null,"Default Value"),(0,l.kt)("th",null,"Mandatory"),(0,l.kt)("tbody",null,(0,l.kt)(k,{data:m,mdxType:"GenTable"}))),(0,l.kt)("h2",{id:"authorization-types"},"Authorization types"),(0,l.kt)("h3",{id:"basic"},"BASIC"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SAP_PROVIDER_AUTH_TYPE = BASIC")," needs additional properties to be configured, in particular:"),(0,l.kt)("table",null,(0,l.kt)("th",null,"Property"),(0,l.kt)("th",null,"Description"),(0,l.kt)("th",null,"Default Value"),(0,l.kt)("th",null,"Mandatory"),(0,l.kt)("tbody",null,(0,l.kt)(k,{data:g,mdxType:"GenTable"}))),(0,l.kt)("h3",{id:"tls"},"TLS"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SAP_PROVIDER_AUTH_TYPE = TLS")," authenticates based on client certificate provided and server identity (TLS mutual authentication). The following options are available for the configuration of ",(0,l.kt)("inlineCode",{parentName:"p"},"TLS")," authentication:"),(0,l.kt)("table",null,(0,l.kt)("th",null,"Property"),(0,l.kt)("th",null,"Description"),(0,l.kt)("th",null,"Default Value"),(0,l.kt)("th",null,"Mandatory"),(0,l.kt)("tbody",null,(0,l.kt)(k,{data:f,mdxType:"GenTable"}))),(0,l.kt)("h4",{id:"keystore-formats"},"Keystore formats"),(0,l.kt)("p",null,"The supported values for ",(0,l.kt)("inlineCode",{parentName:"p"},"SAD_PROVIDER_KEYSTORE_FORMAT")," are defined as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"CRYPTOTOKEN"))," - the keystore is provided as reference to other Crypto Token defined in the SignServer. It must be part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"OTHER_SIGNERS")," property"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"BASE64"))," - The keystore is provided as Base64-encoded value that is part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SAD_PROVIDER_KEYSTORE")," property"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"FILE"))," - The keystore is loaded from the filesystem and the absolute path for the keystore is expected to be provided as part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SAD_PROVIDER_KEYSTORE")," property")),(0,l.kt)("h4",{id:"truststore-formats"},"Truststore formats"),(0,l.kt)("p",null,"The supported values for ",(0,l.kt)("inlineCode",{parentName:"p"},"SAD_PROVIDER_TRUSTSTORE_FORMAT")," are defined as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"PEM"))," - the truststore is provided as list of PEM-encoded certificates to be used as a trusted sources and is expected to be provided as part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SAD_PROVIDER_TRUSTSTORE")," property"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"BASE64"))," - The truststore is provided as Base64-encoded value that is part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SAD_PROVIDER_TRUSTSTORE")," property"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"FILE"))," - The keystore is loaded from the filesystem and the absolute path for the keystore is expected to be provided as part of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SAD_PROVIDER_TRUSTSTORE")," property")),(0,l.kt)("h2",{id:"openapi-definition"},"OpenAPI Definition"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"v2")," implementation of the OpenAPI definition is mandatory to use batch signing. See ",(0,l.kt)("a",{parentName:"p",href:"../../../ades-formats/batch-signing"},"Batch Signing")," for more information.")),(0,l.kt)("h3",{id:"v1"},"v1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi: 3.0.3\ninfo:\n  title: REST Signature SAP Provider\n  version: v1\npaths:\n  /v1/sad/buildSad:\n    post:\n      operationId: buildSad\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildSadRequestDTO'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/BuildSadResponseDTO'\ncomponents:\n  schemas:\n    BuildSadRequestDTO:\n      type: object\n      properties:\n        userId:\n          type: string\n        keyId:\n          type: string\n        dtbs:\n          type: string\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n    BuildSadResponseDTO:\n      type: object\n      properties:\n        sad:\n          type: string\n")),(0,l.kt)("h3",{id:"v2"},"v2"),(0,l.kt)("p",null,"v2 API supports building Signature Activation Data for multiple data to be signed. It is mandatory to implement to support batch signing.\nSee ",(0,l.kt)("a",{parentName:"p",href:"../../../ades-formats/batch-signing"},"Batch Signing")," for more information."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi: 3.0.3\ninfo:\n  title: REST Signature SAP Provider\n  version: v1\npaths:\n  /v2/sad/buildSad:\n    post:\n      operationId: buildSad\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildSadRequestDTO'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/BuildSadResponseDTO'\ncomponents:\n  schemas:\n    BuildSadRequestDTO:\n      type: object\n      properties:\n        userId:\n          type: string\n        keyId:\n          type: string\n        dtbs:\n          type: array\n          items:\n            type: string\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n    BuildSadResponseDTO:\n      type: object\n      properties:\n        sad:\n          type: string\n")))}R.isMDXComponent=!0}}]);