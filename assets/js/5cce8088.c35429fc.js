"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[9714],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81127:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(83117),i=t(80102),o=(t(67294),t(3905)),a=["components"],s={},c="CryptoServer CP5 PKCS#11 Installation",l={unversionedId:"signing/qscd-integration/utimaco-cp5/middleware",id:"signing/qscd-integration/utimaco-cp5/middleware",title:"CryptoServer CP5 PKCS#11 Installation",description:"11 Installation",source:"@site/docs/30-signing/25-qscd-integration/07-utimaco-cp5/09-middleware.md",sourceDirName:"30-signing/25-qscd-integration/07-utimaco-cp5",slug:"/signing/qscd-integration/utimaco-cp5/middleware",permalink:"/docs/signing/qscd-integration/utimaco-cp5/middleware",draft:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/25-qscd-integration/07-utimaco-cp5/09-middleware.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Issue and Import Certificate",permalink:"/docs/signing/qscd-integration/utimaco-cp5/issuecert"},next:{title:"Crypto Token Configuration",permalink:"/docs/signing/qscd-integration/utimaco-cp5/cryptotoken"}},p={},u=[{value:"Install CryptoServer CP5 PKCS#11 libraries",id:"install-cryptoserver-cp5-pkcs11-libraries",level:2},{value:"Configuration of CryptoServer CP5 PKCS#11 middleware",id:"configuration-of-cryptoserver-cp5-pkcs11-middleware",level:2},{value:"<code>CS_PKCS11_R2_CFG</code>",id:"cs_pkcs11_r2_cfg",level:2},{value:"Configure CryptoServer CP5 PKCS#11 for SignServer",id:"configure-cryptoserver-cp5-pkcs11-for-signserver",level:2}],d={toc:u},m="wrapper";function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cryptoserver-cp5-pkcs11-installation"},"CryptoServer CP5 PKCS#11 Installation"),(0,o.kt)("p",null,"CryptoServer CP5 comes with the PKCS#11 middleware that is used in order to integrate with the PKCS#11 Crypto Token of the SignServer. You can use the following instructions in order to install the CryptoServer CP5 PKCS#11 middleware to be used with the SignServer."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The following document assumes installation on the Linux system, however, the steps can be reproduced on other OS with different libraries.")),(0,o.kt)("h2",{id:"install-cryptoserver-cp5-pkcs11-libraries"},"Install CryptoServer CP5 PKCS#11 libraries"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For Linux, and other UNIX systems: shared library ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2.so")," and static library ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2_m.a"),". Both are built with the GNU Compiler Collections. The libraries contain everything that is needed to communicate between the SignServer and CryptoServer CP5.")),(0,o.kt)("p",null,"Copy ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2.so")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2_m.a")," files into directory where applications and user can find and use them, for example into ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/lib")," folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cp libcs_pkcs11_R2.so /usr/lib\ncp libcs_pkcs11_R2_m.a /usr/lib\n")),(0,o.kt)("p",null,"It is important, that the user that runs the SignServer (and the application server) has proper permission to use both ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2.so")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"libcs_pkcs11_R2_m.a"),"."),(0,o.kt)("h2",{id:"configuration-of-cryptoserver-cp5-pkcs11-middleware"},"Configuration of CryptoServer CP5 PKCS#11 middleware"),(0,o.kt)("p",null,"Create a copy of the sample configuration file ",(0,o.kt)("inlineCode",{parentName:"p"},"cs_pkcs11_R2.cfg")," and save it into location where the user running the SignServer has proper permissions to read its content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cp cs_pkcs11_R2.cfg /etc/utimaco/cs_pkcs11_R2.cfg\n")),(0,o.kt)("p",null,"Configure the properties of the ",(0,o.kt)("inlineCode",{parentName:"p"},"cs_pkcs11_R2.cfg")," according to your environment setup. For the list of all available properties and description, refer to ",(0,o.kt)("strong",{parentName:"p"},"PKCS#11 R2 Developer Guide")),(0,o.kt)("p",null,"For the documentation purposes, let's assume the following CryptoServer CP5 PKCS#11 configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[Global]\n# Path to the logfile (name of logfile is attached by the API)\n# For unix:\nLogpath = /tmp\n# For windows:\n#Logpath = C:/ProgramData/Utimaco/PKCS11_R2\n\n# Loglevel (0 = NONE; 1 = ERROR; 2 = WARNING; 3 = INFO; 4 = TRACE)\nLogging = 4\n# Maximum size of the logfile in bytes (file is rotated with a backupfile if full)\nLogsize = 10mb\n\n# If true, key handles of created/generated keys are random\nRandomizeKeyHandles = false\n\n# If true, every session establishs its own connection\nSlotMultiSession = true\n\n# Maximum number of slots that can be used\nSlotCount = 10\n\n# If true, leading zeroes of decryption operations will be kept\nKeepLeadZeros = false\n\n# Configures load balancing mode ( == 0 ) or failover mode ( > 0 )\nFallbackInterval = 0\n\n# Prevents expiring session after inactivity of 15 minutes\nKeepAlive = false\n\n# Timeout of the open connection command in ms\nConnectionTimeout = 5000\n\n# Timeout of command execution in ms\nCommandTimeout = 60000\n\n# List of official PKCS#11 mechanisms which should be customized\n#CustomMechanisms = { CKM_AES_CBC CKM_AES_ECB }\n\n#[CryptoServer]\n# Device specifier (here: CryptoServer is internal PCI device)\n# For unix:\n#Device = /dev/cs2\n# For windows:\n#Device = PCI:0\n\n[CryptoServer]\n# Device specifier (here: CryptoServer is CSLAN with IP address 192.168.0.1)\n#Device = 192.168.0.1\nDevice = 3001@localhost\n\n#[CryptoServer]\n# Device specifier (here: CryptoServer is logical failover device of CSLANs with IP address 192.168.0.2 and IP address 192.168.0.3)\n#Device = { 192.168.0.2 192.168.0.3 }\n\n#[Slot]\n# Slotsection for slot with number 0\n#SlotNumber = 0\n")),(0,o.kt)("h2",{id:"cs_pkcs11_r2_cfg"},(0,o.kt)("inlineCode",{parentName:"h2"},"CS_PKCS11_R2_CFG")),(0,o.kt)("p",null,"Export the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"CS_PKCS11_R2_CFG")," with the value of the path to the ",(0,o.kt)("inlineCode",{parentName:"p"},"cs_pkcs11_R2.cfg")," configuration file."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CS_PKCS11_R2_CFG")," environment variable must be available to user running the SignServer application. (through the environment settings or running scripts)"),(0,o.kt)("h2",{id:"configure-cryptoserver-cp5-pkcs11-for-signserver"},"Configure CryptoServer CP5 PKCS#11 for SignServer"),(0,o.kt)("p",null,"In order SignServer get access to the CryptoServer CP5, it needs to be configured and available for the SignServer. This is configured as ",(0,o.kt)("inlineCode",{parentName:"p"},"cryptotoken")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"signserver_deploy.properties")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cryptotoken.p11.lib.110.name = CryptoServerCP5\ncryptotoken.p11.lib.110.file = /usr/lib/libcs_pkcs11_R2.so\n")),(0,o.kt)("p",null,"Once the CryptoServer CP5 PKCS#11 is configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"signserver_deploy.properties"),", SignServer must be redeployed to reflect changes and access the CryptoServer CP5 HSM."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bin/ant deploy\n")),(0,o.kt)("p",null,"Make sure the application server is running and verify that SignServer was deployed correctly."))}f.isMDXComponent=!0}}]);