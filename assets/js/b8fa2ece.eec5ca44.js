"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[5416],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(t),g=o,f=l["".concat(s,".").concat(g)]||l[g]||d[g]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},29729:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var r=t(83117),o=t(80102),i=(t(67294),t(3905)),a=["components"],c={},s="Crypto Token Configuration",p={unversionedId:"signing/qscd-integration/nshield-xc-cc/cryptotoken",id:"signing/qscd-integration/nshield-xc-cc/cryptotoken",title:"Crypto Token Configuration",description:"nShield XC CC uses a standard PKCS#11 Crypto Token for the integration with the SignServer.",source:"@site/docs/30-signing/25-qscd-integration/09-nshield-xc-cc/11-cryptotoken.md",sourceDirName:"30-signing/25-qscd-integration/09-nshield-xc-cc",slug:"/signing/qscd-integration/nshield-xc-cc/cryptotoken",permalink:"/docs/signing/qscd-integration/nshield-xc-cc/cryptotoken",draft:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/25-qscd-integration/09-nshield-xc-cc/11-cryptotoken.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nCipher PKCS#11 Installation",permalink:"/docs/signing/qscd-integration/nshield-xc-cc/middleware"},next:{title:"Introduction",permalink:"/docs/signing/sam-integration/overview"}},u={},l=[{value:"Sample configuration",id:"sample-configuration",level:2}],d={toc:l},g="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)(g,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"crypto-token-configuration"},"Crypto Token Configuration"),(0,i.kt)("p",null,"nShield XC CC uses a standard ",(0,i.kt)("a",{parentName:"p",href:"https://doc.primekey.com/signserver/signserver-reference/signserver-components/cryptotokens/pkcs11cryptotoken"},"PKCS#11 Crypto Token")," for the integration with the SignServer."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Private keys can be managed through the PKCS#11 Crypto Token, however, such private keys would not be generated and used as assigned private keys, but general private keys (see ",(0,i.kt)("a",{parentName:"p",href:"./cmts"},"CMTS Security World"),"). The PKCS#11 Crypto Token should always be configured as a last step with existing certificate and assigned private key authorized for signing/sealing operations.")),(0,i.kt)("h2",{id:"sample-configuration"},"Sample configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"WORKER6.CRYPTOTOKEN_IMPLEMENTATION_CLASS=org.signserver.server.cryptotokens.PKCS11CryptoToken\nWORKER6.SLOTLABELVALUE=testsoftcard01\nWORKER6.NAME=nShieldCMTSCryptoToken\nWORKER6.PIN=_MASKED_\nWORKER6.IMPLEMENTATION_CLASS=org.signserver.server.signers.CryptoWorker\nWORKER6.DEFAULTKEY=testassignedkey01\nWORKER6.ATTRIBUTES=attributes(generate,CKO_PUBLIC_KEY,*) \\= {\\r\\n   CKA_TOKEN \\= false\\r\\n   CKA_ENCRYPT \\= false\\r\\n   CKA_VERIFY \\= true\\r\\n   CKA_WRAP \\= false\\r\\n}\\r\\nattributes(generate, CKO_PRIVATE_KEY,*) \\= {\\r\\n   CKA_TOKEN \\= true\\r\\n   CKA_PRIVATE \\= true\\r\\n   CKA_SENSITIVE \\= true\\r\\n   CKA_EXTRACTABLE \\= false\\r\\n   CKA_DECRYPT \\= false\\r\\n   CKA_SIGN \\= true\\r\\n   CKA_UNWRAP \\= false\\r\\n}\nWORKER6.SHAREDLIBRARYNAME=nShieldXCCC\nWORKER6.DISABLED=FALSE\nWORKER6.TYPE=CRYPTO_WORKER\nWORKER6.SLOTLABELTYPE=SLOT_LABEL\n")))}f.isMDXComponent=!0}}]);